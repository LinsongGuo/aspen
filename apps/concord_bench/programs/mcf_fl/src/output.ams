
output.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <write_circulations>:
#else
long write_circulations( outfile, net )
     char *outfile;
     network_t *net;
#endif 
{
   0:	f3 0f 1e fa          	endbr64 
   4:	41 57                	push   %r15
   6:	41 56                	push   %r14
   8:	41 55                	push   %r13
   a:	41 54                	push   %r12
   c:	55                   	push   %rbp
   d:	48 89 f5             	mov    %rsi,%rbp
  10:	53                   	push   %rbx
  11:	48 83 ec 08          	sub    $0x8,%rsp
    FILE *out = NULL;
    arc_t *block;
    arc_t *arc;
    arc_t *arc2;
    arc_t *first_impl = net->stop_arcs - net->m_impl;
  15:	48 8b 86 b8 01 00 00 	mov    0x1b8(%rsi),%rax
  1c:	4c 8b a6 40 02 00 00 	mov    0x240(%rsi),%r12

    if(( out = fopen( outfile, "w" )) == NULL )
  23:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2a <write_circulations+0x2a>
    arc_t *first_impl = net->stop_arcs - net->m_impl;
  2a:	48 c1 e0 06          	shl    $0x6,%rax
  2e:	49 29 c4             	sub    %rax,%r12
    if(( out = fopen( outfile, "w" )) == NULL )
  31:	e8 00 00 00 00       	call   36 <write_circulations+0x36>
  36:	48 85 c0             	test   %rax,%rax
  39:	0f 84 09 01 00 00    	je     148 <write_circulations+0x148>
        return -1;

    refresh_neighbour_lists( net );
  3f:	48 89 ef             	mov    %rbp,%rdi
  42:	49 89 c7             	mov    %rax,%r15
  45:	e8 00 00 00 00       	call   4a <write_circulations+0x4a>
    
    for( block = net->nodes[net->n].firstout; block; block = block->nextout )
  4a:	48 8b 85 90 01 00 00 	mov    0x190(%rbp),%rax
  51:	48 8b 8d 28 02 00 00 	mov    0x228(%rbp),%rcx
  58:	48 8d 14 40          	lea    (%rax,%rax,2),%rdx
  5c:	48 8d 04 90          	lea    (%rax,%rdx,4),%rax
  60:	48 8d 04 c1          	lea    (%rcx,%rax,8),%rax
  64:	4c 8b 70 38          	mov    0x38(%rax),%r14
  68:	4d 85 f6             	test   %r14,%r14
  6b:	0f 84 ed 00 00 00    	je     15e <write_circulations+0x15e>
  71:	4c 8d 2d 00 00 00 00 	lea    0x0(%rip),%r13        # 78 <write_circulations+0x78>
  78:	eb 13                	jmp    8d <write_circulations+0x8d>
  7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  80:	4d 8b 76 20          	mov    0x20(%r14),%r14
  84:	4d 85 f6             	test   %r14,%r14
  87:	0f 84 d1 00 00 00    	je     15e <write_circulations+0x15e>
    {
        if( block->flow )
  8d:	49 83 7e 30 00       	cmpq   $0x0,0x30(%r14)
  92:	74 ec                	je     80 <write_circulations+0x80>

# ifdef __va_arg_pack
__fortify_function int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  94:	4c 89 f9             	mov    %r15,%rcx
  97:	ba 03 00 00 00       	mov    $0x3,%edx
  9c:	be 01 00 00 00       	mov    $0x1,%esi
        {
            fprintf( out, "()\n" );
            
            arc = block;
            while( arc )
  a1:	4c 89 f3             	mov    %r14,%rbx
  a4:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # ab <write_circulations+0xab>
  ab:	e8 00 00 00 00       	call   b0 <write_circulations+0xb0>
            {
                if( arc >= first_impl )
  b0:	4c 39 e3             	cmp    %r12,%rbx
  b3:	73 67                	jae    11c <write_circulations+0x11c>
  b5:	0f 1f 00             	nopl   (%rax)
                    fprintf( out, "***\n" );

                fprintf( out, "%d\n", - arc->head->number );
  b8:	48 8b 43 10          	mov    0x10(%rbx),%rax
  bc:	4c 89 ea             	mov    %r13,%rdx
  bf:	be 01 00 00 00       	mov    $0x1,%esi
  c4:	4c 89 ff             	mov    %r15,%rdi
  c7:	8b 48 60             	mov    0x60(%rax),%ecx
  ca:	31 c0                	xor    %eax,%eax
  cc:	f7 d9                	neg    %ecx
  ce:	e8 00 00 00 00       	call   d3 <write_circulations+0xd3>
                arc2 = arc->head[net->n_trips].firstout; 
  d3:	48 8b 85 98 01 00 00 	mov    0x198(%rbp),%rax
  da:	48 8d 14 40          	lea    (%rax,%rax,2),%rdx
  de:	48 8d 04 90          	lea    (%rax,%rdx,4),%rax
  e2:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  e6:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
  ea:	48 8b 58 38          	mov    0x38(%rax),%rbx
                for( ; arc2; arc2 = arc2->nextout )
  ee:	48 85 db             	test   %rbx,%rbx
  f1:	75 0e                	jne    101 <write_circulations+0x101>
  f3:	eb 4b                	jmp    140 <write_circulations+0x140>
  f5:	0f 1f 00             	nopl   (%rax)
  f8:	48 8b 5b 20          	mov    0x20(%rbx),%rbx
  fc:	48 85 db             	test   %rbx,%rbx
  ff:	74 3f                	je     140 <write_circulations+0x140>
                    if( arc2->flow )
 101:	48 83 7b 30 00       	cmpq   $0x0,0x30(%rbx)
 106:	74 f0                	je     f8 <write_circulations+0xf8>
                {
                    fclose( out );
                    return -1;
                }
                
                if( arc2->head->number )
 108:	48 8b 43 10          	mov    0x10(%rbx),%rax
 10c:	8b 40 60             	mov    0x60(%rax),%eax
 10f:	85 c0                	test   %eax,%eax
 111:	0f 84 69 ff ff ff    	je     80 <write_circulations+0x80>
                if( arc >= first_impl )
 117:	4c 39 e3             	cmp    %r12,%rbx
 11a:	72 9c                	jb     b8 <write_circulations+0xb8>
 11c:	4c 89 f9             	mov    %r15,%rcx
 11f:	ba 04 00 00 00       	mov    $0x4,%edx
 124:	be 01 00 00 00       	mov    $0x1,%esi
 129:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 130 <write_circulations+0x130>
 130:	e8 00 00 00 00       	call   135 <write_circulations+0x135>
 135:	eb 81                	jmp    b8 <write_circulations+0xb8>
 137:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
 13e:	00 00 
                    fclose( out );
 140:	4c 89 ff             	mov    %r15,%rdi
 143:	e8 00 00 00 00       	call   148 <write_circulations+0x148>


    fclose(out);
    
    return 0;
}
 148:	48 83 c4 08          	add    $0x8,%rsp
                    return -1;
 14c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
 153:	5b                   	pop    %rbx
 154:	5d                   	pop    %rbp
 155:	41 5c                	pop    %r12
 157:	41 5d                	pop    %r13
 159:	41 5e                	pop    %r14
 15b:	41 5f                	pop    %r15
 15d:	c3                   	ret    
    fclose(out);
 15e:	4c 89 ff             	mov    %r15,%rdi
 161:	e8 00 00 00 00       	call   166 <write_circulations+0x166>
}
 166:	48 83 c4 08          	add    $0x8,%rsp
    return 0;
 16a:	31 c0                	xor    %eax,%eax
}
 16c:	5b                   	pop    %rbx
 16d:	5d                   	pop    %rbp
 16e:	41 5c                	pop    %r12
 170:	41 5d                	pop    %r13
 172:	41 5e                	pop    %r14
 174:	41 5f                	pop    %r15
 176:	c3                   	ret    
